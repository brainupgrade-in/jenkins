pipeline {
agent {
    kubernetes {
      defaultContainer 'dind'
      yaml """
apiVersion: v1
kind: Pod
spec:
  containers:
  - name: dind
    image: brainupgrade/docker:20-dind
    env:
    - name: DOCKER_TLS_CERTDIR
      value: ''
    securityContext:
      privileged: true
  - name: docker
    env:
    - name: DOCKER_HOST
      value: 127.0.0.1
    image: docker
    command:
    - cat
    tty: true
    startupProbe:
      tcpSocket:
        port: 2375
      periodSeconds: 10
      successThreshold: 1
      failureThreshold: 10
"""
    }
  }
    stages {
        stage('NPM Build') {
          steps {
            git branch: 'master', url: 'https://github.com/brainupgrade-in/nodejsappdocker'
            script {
              withDockerContainer(image: 'node:20-alpine3.17') {
                sh 'npm install'
              }
            }
          }
        }
        stage('Testing in parallel') {
          parallel {
            stage('Run app ') {
              steps {
                timeout(time: 1, unit: 'MINUTES') {
                  withDockerContainer(args: '--name test -p 8000:8000', image: 'node:20-alpine3.17') {
                    sh 'npm start &'
                    sh 'sleep 45 '
                  }
                }
              }
            }
            stage('Network testing') {
              steps {
                retry(3) {
                  timeout(time: 1, unit: 'MINUTES') {
                      withDockerContainer(args: '--link test:test', image: 'brainupgrade/tshoot') {
                        sh 'nc -vz test:8000'
                      }
                  }
                }
              }
            }
            stage('JMeter Performance testing') {
              steps {
                withDockerContainer( image: 'brainupgrade/tshoot') {
                  sh 'echo done with jmeter perf testing'
                }
              }
            }
          }
        }
    }
  post {
    always {
      sh 'docker ps -q | xargs -I {} docker stop {}'
      sh 'docker ps -a -q | xargs -I {} docker rm {}'
    }
  }
}
