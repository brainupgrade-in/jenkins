pipeline {
  agent {
    kubernetes {
      defaultContainer 'maven'
      yaml """
apiVersion: v1
kind: Pod
spec:
  volumes:
  - name: mvnrepo
    persistentVolumeClaim:
      claimName: maven-repo
  containers:
  - name: trivy
    image: aquasec/trivy
    command:
    - cat
    tty: true
  - name: dind
    image: brainupgrade/docker:20-dind
    env:
    - name: DOCKER_TLS_CERTDIR
      value: ''
    securityContext:
      privileged: true
  - name: docker
    env:
    - name: DOCKER_HOST
      value: 127.0.0.1
    image: docker
    command:
    - cat
    tty: true
    startupProbe:
      tcpSocket:
        port: 2375
      periodSeconds: 10
      successThreshold: 1
      failureThreshold: 10
  - name: maven
    image: maven:3.8.3-openjdk-17
    command:
    - cat
    tty: true
    volumeMounts:
    - name: mvnrepo
      mountPath: "/root/.m2/repository"     
  - name: jmeter
    image: egaillardon/jmeter
    command:
    - cat
    tty: true           
"""
    }
  }
    stages {
        stage('Compile') {
            steps {
                git url: 'https://github.com/brainupgrade-in/request-logger', branch: 'main'
                container('maven') {
                  sh 'mvn -B -ntp clean package -DargLine="--add-opens=jdk.compiler/com.sun.tools.javac.processing=ALL-UNNAMED --add-opens=jdk.compiler/com.sun.tools.javac.util=ALL-UNNAMED"'
                }
            }
        }
        stage('JUnit Tests') {
            steps {
                container('maven') {
                    sh 'mvn test '
                    junit 'complete/target/surefire-reports/**/*.xml'
                }
            }
        }        
        stage('Code Coverage') {
            steps {
                container('maven') {
                    sh 'mvn cobertura:cobertura'
                    cobertura coberturaReportFile: '**/coverage.xml'
                }
            }
        }        
        stage('Performance Tests') {
            steps {
                sh "wget https://raw.githubusercontent.com/brainupgrade-in/jenkins/main/src/test/resources/jmeter-e2e.jmx"
                sh "mkdir -p src/test/resources && mv jmeter-e2e.jmx src/test/resources/jmeter-e2e.jmx"
                container('jmeter'){
                    sh "jmeter -n -t ${env.WORKSPACE}/src/test/resources/jmeter-e2e.jmx -l result.jtl -e -o result"
                    // perfReport filterRegex: '', sourceDataFiles: '**/*.jtl'
                    publishHTML([allowMissing: false, alwaysLinkToLastBuild: false, keepAll: false, reportDir: 'result', reportFiles: 'index.html', reportName: 'JMeter-Report', reportTitles: ''])
                }
            }
        }        
        stage('Build') {
            steps {
                container('maven') {
                  sh 'mvn install'
                }
            }
        }
        stage("Docker Build & Push"){
            steps{
                sh "wget https://raw.githubusercontent.com/brainupgrade-in/request-logger/main/Dockerfile"
                container('docker') {
                    withDockerRegistry(credentialsId: 'docker-hub-credentials', url: 'https://index.docker.io/v1/') {                        
                        sh "docker build -t brainupgrade/${env.JOB_NAME}:${env.BUILD_ID} ."
                        sh "docker push brainupgrade/${env.JOB_NAME}:${env.BUILD_ID} "
                    }
                }
            }
        }        
        stage('Image Scan'){
            steps{
                script{
                    container('trivy'){
                        sh "trivy image --severity HIGH,CRITICAL  --output image-cve.html brainupgrade/${env.JOB_NAME}:${env.BUILD_ID}"
                        publishHTML([allowMissing: false, alwaysLinkToLastBuild: false, keepAll: true, reportDir: '.', reportFiles: 'image-cve.html', reportName: 'ImageScan-CVE-Trivy-Report', reportTitles: ''])
                    }
                }
            }
        }        
    }
}
